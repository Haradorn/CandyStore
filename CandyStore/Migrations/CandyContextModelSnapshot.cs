// <auto-generated />
using System;
using CandyStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CandyStore.Migrations
{
    [DbContext(typeof(CandyContext))]
    partial class CandyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CandyStore.Models.Buyer", b =>
                {
                    b.Property<int>("BuyerID")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BuyerID");

                    b.HasIndex("CityID");

                    b.ToTable("Buyer", (string)null);
                });

            modelBuilder.Entity("CandyStore.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityID");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("CandyStore.Models.Manager", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerID"), 1L, 1);

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ManagerID");

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("CandyStore.Models.Production", b =>
                {
                    b.Property<int>("ProductionID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductTypeID")
                        .HasColumnType("int");

                    b.HasKey("ProductionID");

                    b.HasIndex("ProductTypeID");

                    b.ToTable("Production", (string)null);
                });

            modelBuilder.Entity("CandyStore.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTypeID"), 1L, 1);

                    b.Property<string>("ProductTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductTypeID");

                    b.ToTable("ProductType", (string)null);
                });

            modelBuilder.Entity("CandyStore.Models.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"), 1L, 1);

                    b.Property<int>("BuyerID")
                        .HasColumnType("int");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SaleID");

                    b.HasIndex("BuyerID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("ProductionID");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("CandyStore.Models.Buyer", b =>
                {
                    b.HasOne("CandyStore.Models.City", "City")
                        .WithMany("Buyers")
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("CandyStore.Models.Production", b =>
                {
                    b.HasOne("CandyStore.Models.ProductType", "ProductType")
                        .WithMany("Productions")
                        .HasForeignKey("ProductTypeID");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("CandyStore.Models.Sale", b =>
                {
                    b.HasOne("CandyStore.Models.Buyer", "Buyer")
                        .WithMany("Sales")
                        .HasForeignKey("BuyerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CandyStore.Models.Manager", "Manager")
                        .WithMany("Sales")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CandyStore.Models.Production", "Production")
                        .WithMany("Sales")
                        .HasForeignKey("ProductionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Manager");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("CandyStore.Models.Buyer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("CandyStore.Models.City", b =>
                {
                    b.Navigation("Buyers");
                });

            modelBuilder.Entity("CandyStore.Models.Manager", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("CandyStore.Models.Production", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("CandyStore.Models.ProductType", b =>
                {
                    b.Navigation("Productions");
                });
#pragma warning restore 612, 618
        }
    }
}
